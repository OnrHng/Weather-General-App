{"version":3,"sources":["Cities.js","CityList.js","Resorces.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["City","name","weatherText","weatherIcon","temp","className","alt","src","CityList","cities","cityArray","map","user","i","Cities","key","weather","icon","description","city_name","cityName","id","country","SearchBox","search","type","placehoder","onChange","App","onSearch","event","setState","searchfield","target","value","console","log","state","this","filterCity","filter","city","toLowerCase","includes","a","Promise","all","axios","get","method","mode","params","response","res","data","fetchWeather","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27ceeca4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst City = ({name, weatherText, weatherIcon, temp}) => {\r\n  return (\r\n  \t<div className='tc bg-light-blue dib br4 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='Weather' src={`https://www.weatherbit.io/static/img/icons/${weatherIcon}.png`}/>\r\n\t\t<div>\r\n\t\t\t<h2>{temp}Â°C</h2>\r\n\t\t\t<p>{weatherText}</p>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t</div>\r\n\t</div>\r\n  \t) \r\n}\r\n \r\nexport default City;\r\n\r\n// if (country === 'GE') {\r\n// \t\t\t\t<h2>Germany</h2>\r\n// \t\t\t} else if (country === 'TR'){\r\n// \t\t\t\t<h2>Turkey</h2>\r\n// \t\t\t} else if (country=== 'Fr'){\r\n// \t\t\t\t<h2>France</h2>\r\n// \t\t\t} else if (country==='NL'){\r\n// \t\t\t\t<h2>Netherland</h2>\r\n// \t\t\t} else if(country=== 'RS'){\r\n// \t\t\t\t<h2>Serbia</h2>\r\n// \t\t\t}else if (country=== 'ES'){\r\n// \t\t\t\t<h2>Spain</h2>\r\n// \t\t\t} else if (country==='AT'){\r\n// \t\t\t\t<h2>Austria</h2>\r\n// \t\t\t} else if (country==='GB'){\r\n// \t\t\t\t<h2>England</h2>\r\n// \t\t\t}","import React from 'react';\r\nimport Cities from './Cities';\r\n\r\nconst CityList = ({cities})=>{\r\n const cityArray = cities.map((user,i) => {\r\n\t\treturn (\r\n\t\t\t<Cities \r\n\t\t\t\tkey={i}\r\n\t\t\t\ttemp={cities[i].temp} \r\n\t\t\t\tweatherIcon={cities[i].weather.icon}\r\n\t\t\t\tweatherText={cities[i].weather.description} \r\n\t\t\t\tname={cities[i].city_name}\r\n\t\t\t\t/>\r\n\t\t);\t \r\n\t});\r\n return (\r\n\t<div className='tc'>\r\n\t\t<div>\r\n\t\t\t{cityArray}\r\n\t\t</div>\t\r\n\t</div>\r\n\t);\r\n}\r\nexport default CityList;\r\n\r\n","export const cityName = [\r\n  {\r\n    id: 1,\r\n    name: \"New York City\",\r\n    country: \"US\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Vienna\",\r\n    country: \"AT\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Istanbul\",\r\n    country: \"TR\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"London\",\r\n    country: \"GB\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Ankara\",\r\n    country: \"TR\",\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Paris\",\r\n    country: \"FR\",\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Madrid\",\r\n    country: \"ES\",\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Amsterdam\",\r\n    country: \"NL\",\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Belgrade\",\r\n    country: \"RS\",\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Munich\",\r\n    country: \"DE\",\r\n  },\r\n  {\r\n    id: 11,\r\n    name: \"Berlin\",\r\n    country: \"DE\",\r\n  },\r\n  {\r\n    id: 12,\r\n    name: \"Chicago\",\r\n    country: \"US\",\r\n  },\r\n  {\r\n    id: 13,\r\n    name: \"Brussels\",\r\n    country: \"BE\",\r\n  },\r\n  {\r\n    id: 14,\r\n    name: \"Rome\",\r\n    country: \"IT\",\r\n  },\r\n  {\r\n    id: 15,\r\n    name: \"Washington\",\r\n    country: \"US\",\r\n  }\r\n];","import React from 'react';\r\n\r\nconst SearchBox = ({search}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplacehoder='Search City'\r\n\t\t\t\tonChange={search}\r\n\t \t\t/>\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default SearchBox;","import React, {Component} from 'react';\nimport './App.css';\nimport CityList from './CityList';\nimport {cityName} from './Resorces';\nimport axios from 'axios';\nimport SearchBox from './SearchBox';\n\n\nclass App extends Component {\n\n  constructor (){\n    super()\n    this.state = {\n      cities:[],\n      searchfield:''\n    }\n  }\n\n  onSearch = (event) =>{\n    this.setState({ searchfield: event.target.value});  \n    console.log('event', event);\n  }\n\n  render() {\n    const {cities, searchfield} = this.state;\n    const filterCity = cities.filter((city) => {\n      return city.city_name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    console.log('filtercity', filterCity);\n\n    return (\n      <div className='tc'>\n        <h1 className='f1  pa3 ma2'> World Weather</h1>\n        <SearchBox search ={this.onSearch}/><hr/>\n        <CityList cities={filterCity}/>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const fetchWeather = async () => {\n    const response = await Promise.all(\n      cityName.map(city => {\n        return axios.get(\"https://api.weatherbit.io/v2.0/current\", {\n          method: 'GET',\n          mode: 'no-cors',\n          // headers: {\n          //   'Access-Control-Allow-Origin': '*'\n          // },\n          params: {\n            city: `${city.name},${city.country}`,\n            key: \"86e622607fbe4c2cb9f7f71889a4d48d\"\n          }\n        });\n      })\n    );\n    const cities = response.map(res => res.data.data[0]);\n\n    this.setState({ cities });\n    }\n    fetchWeather();\n\n  }\n  // so when you are calling an api the problem is its a future call so you need to somehow make it wait or you need a callback \n  // so when we are wrapping with promise.all it will execute through each one \n  // and once all the call get finish it will put the data into cities.\n     // Promise.all(cityName.map(city => \n    //   fetch(`https://api.weatherbit.io/v2.0/current?city=${city.name}&country=${city.country}&key=5601158bc86d44c48da97c8bbe8cafb2`)))\n    //   .then(resp => Promise.all(resp.map(r => r.json())))\n    //   .then(entireData => {\n    //     entireData.map(res => res.data[0]);\n    //     console.log('entireData', entireData);\n    //     this.setState({cities: entireData});\n    //   }\n        \n    //   ) // in react you need to do this.setState({cities: entireData})\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}